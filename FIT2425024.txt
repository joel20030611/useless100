Find the variance of the eruption duration in the data set faithful.
code:
 d=faithful$eruptions
 var(d)

Find the standard deviation of the eruption duration in the data set faithful.
code:
 sd(faithful$eruptions)

Find the covariance
code:
 x<-c(25,27,29)
 y<-c(5,15,9)
 xdev=x-mean (x)
 ydev-y-mean (y)
 xdev_ ydev=xdev*ydev
 xdev_ydev
[1] 9.333333 0.000000 -1.333333
 sum_xdev_ydev=sum (xdev_ydev)
 cov xy=sum xdev ydev/ (3-1)
 cov xy
[1] 4

Find the covariance of eruption duration and waiting time in the data set faithful.
Observe if there is any linear relationship between the two variables,
code:
cov(d,w)

For calculating correlation we need the product of the standard deviations of variables x
and y for the denominator:
code:
 stnd.dev=sd(x)*sd(y)
 cov_ xy/stnd.dev

Find the correlation coefficient of eruption duration and waiting time in the data set
faithful. Observe if there is any linear relationship between the variables.
code:
cor (d,w)

Install corrplot package:
code:
install.packages ("corrplot")

Data for correlation analysis:
code:
head (mtcars)

Computing correlation matrix:
code:
M=cor(mtcars)
M

code:
head(round(M,2))

Visualization methods
code:
1ibrary (corrplot)

code:
corr<-cor(mtcars)
corrplot (M, method="circle")

code:
corr<-cor(mtcars)
corrplot(corr,method="square")

code:
corr<-cor(mtcars)
corrplot(corr,method="color")

code:
corrplot(corr,method="ellipse")
corr<-cor(mtcars)

code:
corr<-cor(mtcars)
corrplot(corr,method="number")

code:
corr<-cor(mtcars)
corrplot(corr,method="shade")

code:
corr<-cor(mtcars)
corrplot(corr,method="pie")

Types of correlogram layout:
code:
Lower:corrplot(M,type="lower")

code:
Upper:corrplot(M,type="upper")

code:
mixed:corrplot.mixed(corr)

code:
Corrplot.mixed(corr,lower.col="black",number.cex=.7)

code:
Corrplot.mixed(corr,lower.col="black",number.cex=1.5)

code:
Corrplot.mixed(corr,lower="ellipse",upper="circle")

code:
Corrplot.mixed(corr,lower="square",upper="circle",t1.col="black")Range

Range
code:
df<-c(13, 65,123,7,3,87,34,98)
range(df)

Finding the range of vector having NA value:
code:
def<-c (45, 76, 89,NA, 67, 34,NA,56,78)
range (def)

code:
df<-c(45, 76,89,NA, 67,34,NA,56,78)
range (df,na.rm=TRUE)

Finding range of character vector
code:
df<-c('Hayato', 'Antonio', 'Randrew','Jota','Adam','Commander')
range (df)

Quantile()
code:
df<-c(12, 3, 4,56,78,18,46,78, 100)
quantile (df)

Handling the missing value
code:
df<-c(12,3,4,56,78,18,NA,46,78,100,NA)
quantile(df,na.rm=TRUE)

"Probs" argument in quantile
code:
df<-c(12, 3,4,56,78,18,NA, 46,78,100,NA)
quantile (df,na.rm=TRUE,probs=c (0.22,0.77))
10.08 78.00

Box Plot
code:
data("iris")
head (iris)

code:
summary(iris)

Plot this information through a box plot.
code:
boxplot(iris$Sepal.Length,main="The boxplot showing the percentiles', col='Orange'
ylab="Values', xlab='Sepal.Length',border = 'brown',horizontal = T)

Box Plot:

code:
boxplot(airquality$ozone, col=”yellow”,ylab=’values’,xlab=’ozone’,border=’green’

code:
þoxplot (Temp-Month, data=airquality,main="Different boxplots for each month",Xlab=”month number”,ylab=Degree Fahrenheit”,col=”orange”,border=”brown”) 

Percentile:
code:
duration=faithful$eruptions
quantile (duration,c(.32,.57,.98))

Interquartile Range:
code:
x<-c(5,,12,15,16)
print(IQR(x))

code:
x =c(5, 10,12,15,18,22,25,27,30,35)
summary(x)

code:
IQR(x)

Problem faithful:
code:
duration=faithful$eruptions
IQR (duration)

Histogram of Temperature:
code:
Str (airquality)

code:
Temperature <-airquality$Temp
Hist(Temperature)

Histogram with added parameters:
code:
xlab="Temperature in degrees Fahrenheit",xlim=c(50,100),col="darkmagenta", freq=FALSE)
xlab="Temperature in degrees Fahrenheit",xlim=c(50,100),col="darkmagenta",freq=FALSE)

The hist() function returns a list with 6 components:
code:
h<-hist (Temperature)
h

return values to place the counts on top of each cell using the text() function.:
code:
h<- hist (Temperature,ylim=c (0,40))
text (h$mids,h$counts,labels=h$counts, adj=c(0.5, -0.5))

Defining the Number of Breaks:
code:
hist (Temperature, breaks=4, main="Nith breaks=4")

code:
hist (Temperature, breaks=20, main="With breaks=20")

Histogram with non-uniform width:
code:
hist (Temperature,main="Maximum daily temperature at La Guardia Airport",:
xlab="Temperature in degrees Fahrenheit",xlim=c(50,100),col="chocolate",border="brown",Border=”brown”,break=c(55,60,70,75,0,100))

Skewness and kurtosis in R are available in the moments package
Example 1. Meera is interested in the elapse time (in minutes) she spends on riding a bicycle from home, at Sion, to school at Dadar for three weeks (excluding weekends). She obtain the following data: 19.09, 19.55, 17.89, 17.73, 25.15, 27.27, 25.24, 21.05, 21.65, 20.92, 22.61, 15.71, 22.04, 22.60, and 24.25. Compute and interpret the skewness and kurtosis.
code:
c(19.09, 19.55, 17.89, 17.73, 25.15, 27.27, 25.24, 21.05, 21.65, 20.92, 22.61, 15.71, 22.04, 22.60, 24.25)

code:
install.packages("moments")

code:
library (moments)
skewness (time)

code:
kurtosis (time)

Graphical illustration of the data:
code:
qplot (time, geom = 'histogram', bins= 5) + xlab('Time')

Simulate 10000 samples from a normal distribution with mean 55, and standard deviation 4.5, then compute and interpret for the skewness and kurtosis, and plot the histogram:
code:
n.sample<-rnorm(n = 10000, mean - 55, sd = 4.5)
library (moments)
skewness (n.sample)

code:
kurtosis (n.sample)

code:
library(ggplot2)
datasim <- data.frame(n.sample)
ggplot (datasim, aes (x=n.sample), binwidth = 2)+
geom histogram (aes (Y=.density..), fill='red', alpha=0.5) +
geom_density(colour = 'blue') + xlab(expression(bold('Simulated Sampleș$
ylab (expression (bold ('Density')))

Hypothesis Testing:
The engineer hypothesized that the mean Brinell hardness of all such ductile iron pieces is greater than 170. Therefore, he was interested in testing the hypotheses:
H0 : μ = 170 
HA : μ > 170
code:
hardness-c(170, 167,174,179, 187, 179, 183, 179,156, 163, 156, 187,156, 167, 156,174, 170, 183,179, 174, 179,170,159, 187)
t.test (hardness, mu = 170)



Find Mean,Median and Mode:
              
Using Vector :

code:which (letters=="1")
code:x=c(10,23,45,56,13,56,12,13,14)
sum(x:)/1ength (x)
code:mean (x)
code:x
code:sort (x)
code:median (x)
code:y=c(10,23,45,56,13,56,12,13)
sort (y)
code: median (y)
code: which(letters=="p")
code: which (letters=="n")
code:x=c(12,13,14,12,15,12,13,14,16,16,17,12,12)
x
code: table(x)

Mode:
code:names (y) [which (y==max (y) ) ]
code: max (y)
code: which (y=-max (y))

i.when two highest frequenices are same:
code: x-c(12, 13,14,12,15,12,13,14,16,16,17,12,13,13,13,12)
y-table (x)
y

code:names (y) [which (y==max (y) )]

Using Excel data:
code:> cgf=read_ excel ("cardioGoodFitness.xlsx")
Head(cgf)

code:Mean(cgf$age)
code:Af=table(cgf$age)
af
code:names (af) [which(af==max (af))]

CSV File:
code:c=read.csv("CardioGoodFitness.csv")
c

code:mean(cgf$age)
code:median(cgf$Income)
code:name(af)[which (af==max(af))]

Uisng   data frame built in R:
code:Head(mtcars)
code:mean(mtcars$wt)
code:median((mtcars$wt)
code:xx=table(mtcars$wt)
x
code:x=table (mtcars$wt)
x
code:names(x) [which(x==max(x))]
code:summary (mtcars)

Using data frame presentin R with misging values shown as NA:

Code:dim(airquality)
Code:airquality
code:names(airquality)
code:str(airquality)
code:head(airquality)
code:names(airquality)[colSums(is.na(airquality))>0]
Code:airqualitys$ozone
Code: airqualitye$Solar.R
Code:x<-airquality$Solar.R
> table(is.na (x))
Code: x
Code: mean (x)
Code: mean(x,na.rm=TRUE)
Code: median (x,na.rm=TRUE)
Code: sort (table (x))
Code: names(table(x)) [table (x)==max(table (x))]
Code: y=sort (table (x))
> y
Code: names(y) [which(y==max(y))]




























